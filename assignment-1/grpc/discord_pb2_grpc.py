# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import discord_pb2 as discord__pb2


class RegistryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/discord.Registry/Register',
                request_serializer=discord__pb2.RegisterRequest.SerializeToString,
                response_deserializer=discord__pb2.BaseResponse.FromString,
                )
        self.GetServerList = channel.unary_unary(
                '/discord.Registry/GetServerList',
                request_serializer=discord__pb2.GetServerListRequest.SerializeToString,
                response_deserializer=discord__pb2.GetServerListResponse.FromString,
                )


class RegistryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServerList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=discord__pb2.RegisterRequest.FromString,
                    response_serializer=discord__pb2.BaseResponse.SerializeToString,
            ),
            'GetServerList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerList,
                    request_deserializer=discord__pb2.GetServerListRequest.FromString,
                    response_serializer=discord__pb2.GetServerListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'discord.Registry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Registry(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/discord.Registry/Register',
            discord__pb2.RegisterRequest.SerializeToString,
            discord__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServerList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/discord.Registry/GetServerList',
            discord__pb2.GetServerListRequest.SerializeToString,
            discord__pb2.GetServerListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Join = channel.unary_unary(
                '/discord.Server/Join',
                request_serializer=discord__pb2.JoinServerRequest.SerializeToString,
                response_deserializer=discord__pb2.BaseResponse.FromString,
                )
        self.Leave = channel.unary_unary(
                '/discord.Server/Leave',
                request_serializer=discord__pb2.LeaveServerRequest.SerializeToString,
                response_deserializer=discord__pb2.BaseResponse.FromString,
                )
        self.GetArticles = channel.unary_unary(
                '/discord.Server/GetArticles',
                request_serializer=discord__pb2.GetArticlesRequest.SerializeToString,
                response_deserializer=discord__pb2.GetArticlesResponse.FromString,
                )
        self.PublishArticle = channel.unary_unary(
                '/discord.Server/PublishArticle',
                request_serializer=discord__pb2.PublishArticleRequest.SerializeToString,
                response_deserializer=discord__pb2.BaseResponse.FromString,
                )


class ServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Join(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Leave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetArticles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishArticle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Join': grpc.unary_unary_rpc_method_handler(
                    servicer.Join,
                    request_deserializer=discord__pb2.JoinServerRequest.FromString,
                    response_serializer=discord__pb2.BaseResponse.SerializeToString,
            ),
            'Leave': grpc.unary_unary_rpc_method_handler(
                    servicer.Leave,
                    request_deserializer=discord__pb2.LeaveServerRequest.FromString,
                    response_serializer=discord__pb2.BaseResponse.SerializeToString,
            ),
            'GetArticles': grpc.unary_unary_rpc_method_handler(
                    servicer.GetArticles,
                    request_deserializer=discord__pb2.GetArticlesRequest.FromString,
                    response_serializer=discord__pb2.GetArticlesResponse.SerializeToString,
            ),
            'PublishArticle': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishArticle,
                    request_deserializer=discord__pb2.PublishArticleRequest.FromString,
                    response_serializer=discord__pb2.BaseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'discord.Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Join(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/discord.Server/Join',
            discord__pb2.JoinServerRequest.SerializeToString,
            discord__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Leave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/discord.Server/Leave',
            discord__pb2.LeaveServerRequest.SerializeToString,
            discord__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetArticles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/discord.Server/GetArticles',
            discord__pb2.GetArticlesRequest.SerializeToString,
            discord__pb2.GetArticlesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishArticle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/discord.Server/PublishArticle',
            discord__pb2.PublishArticleRequest.SerializeToString,
            discord__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
